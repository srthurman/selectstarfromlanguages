<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Select * from Languages</title><link href="http://www.selectstarfromlanguages.com/" rel="alternate"></link><link href="http://www.selectstarfromlanguages.com/feeds/all.atom.xml" rel="self"></link><id>http://www.selectstarfromlanguages.com/</id><updated>2015-09-17T00:00:00+02:00</updated><entry><title>A Review of Transitland by Mapzen</title><link href="http://www.selectstarfromlanguages.com/transitland_review.html" rel="alternate"></link><updated>2015-09-17T00:00:00+02:00</updated><author><name>Sara Thurman</name></author><id>tag:www.selectstarfromlanguages.com,2015-09-17:transitland_review.html</id><summary type="html">&lt;p&gt;Recently I built &lt;a href="https://github.com/srthurman/TransitTally"&gt;Transit Tally&lt;/a&gt;, a small data visualization of transit options available within the DC metro area. To get the GTFS data I used the awesome &lt;a href="https://transit.land/"&gt;Transitland&lt;/a&gt; by &lt;a href="https://mapzen.com/"&gt;Mapzen&lt;/a&gt;. Transitland is, in its own words:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A community-run and -edited timetable and map of public transit service around the world.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;At present, transit data are fetched from a GTFS zip archive, and related back to other sources. Pretty cool, right? Right.&lt;/p&gt;
&lt;p&gt;Transitland is available to use as an API (the datastore), through a Python or Ruby client, or by way of the in-browser &lt;a href="https://transit.land/playground/"&gt;Playground&lt;/a&gt;. While developing Transit Tally, I explored the Transitland API and Python client. This post is a review of what worked well, and what might benefit from some tweaks.&lt;/p&gt;
&lt;h3&gt;Expand Documentation&lt;/h3&gt;
&lt;p&gt;The Python client documentation gets you up and running, but it doesn't tell you the methods and variables available. The code is well written, as are the tests, so it's not too difficult to read and play around to figure out how to use it. At the same time, it's nice to be able to jump right into using a product without going having to go through the code base first.&lt;/p&gt;
&lt;p&gt;For documentation models, the &lt;a href="http://leafletjs.com/reference.html"&gt;Leaflet documentation&lt;/a&gt; is very well written and organized. Having something similar for the Transitland Python client would be a big help.&lt;/p&gt;
&lt;h3&gt;Loading Large Datasets&lt;/h3&gt;
&lt;p&gt;I used the &lt;a href="https://github.com/transitland/transitland-python-client#working-with-a-feed"&gt;Python client&lt;/a&gt; to load DC's transit feed (WMATA) and attempted to call the &lt;code&gt;load_gtfs&lt;/code&gt; method. After a few failed tries, I closed out all other programs and timed it. ~25 minutes later everything was loaded.&lt;/p&gt;
&lt;p&gt;I was able to have more success using the &lt;code&gt;mzgtfs preload&lt;/code&gt; method directly, cutting down load time to a couple of minutes. However, after talking with a Mapzen team member and looking through the Python client code, I learned using &lt;code&gt;mzgtfs&lt;/code&gt; isn't going to give the same capabilities as using the &lt;code&gt;transitland&lt;/code&gt; package directly.&lt;/p&gt;
&lt;h3&gt;API for Public Use&lt;/h3&gt;
&lt;p&gt;The API is great, and the endpoints are pretty self explanatory. The documentation on running locally is much appreciated for those of us who like to tinker with moving parts--for fun or as part of the learning process.&lt;/p&gt;
&lt;p&gt;Looking at it from the perspective of someone trying to get up and running quickly, it would be nice if there was a public version that made all the data currently in the feed registry available. An access token and/or a free use limit tier is certainly reasonable, as long as it means the API is fully populated.&lt;/p&gt;
&lt;h3&gt;Getting GTFS to JSON is a Breeze&lt;/h3&gt;
&lt;p&gt;Getting transit agencies' data is very simple using both the API and the Python client. Here's all it took to get the data for WMATA:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;transitland.registry&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;mzgtfs.feed&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;

&lt;span class="c"&gt;#initial setup - only do once&lt;/span&gt;
&lt;span class="n"&gt;registry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;transitland&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;registry&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FeedRegistry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;../transitland-feed-registry&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;feed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;registry&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;feed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;f-dqc-wmata&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;feed&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;download&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;wmata-current-gtfs.zip&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;#Main processing&lt;/span&gt;
&lt;span class="n"&gt;wmata&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mzgtfs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;feed&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Feed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;wmata-current-gtfs.zip&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;wmata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;preload&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;metro&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;wmata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;agency&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;MET&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;wmata_metro.json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;outfile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metro&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="n"&gt;outfile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In addition to the regularly scheduled JSON, the API can also return certain endpoints directly as GEOJSON. That alone is worth its weight in CSV files.&lt;/p&gt;
&lt;h3&gt;Linking Data Sources - Brilliant!&lt;/h3&gt;
&lt;p&gt;More goodies: Transitland also "serves as a 'crosswalk' between different identifiers for the same feeds and agencies". Having one place to reference the feeds for an agency is helpful. Best of all, at least to me, stops are linked to OpenStreetMap (OSM) ways! Mighty useful for areas that don't currently have much transit data in OSM. Gets me thinking about possible methodologies for designating transit routes.&lt;/p&gt;
&lt;p&gt;Transitland is a useful and fun tool, and I'm excited to see how it continues to grow. If you haven't tried it for yourself, check it out, along with Mapzen's plethora of other awesome tools.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Resources&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://transit.land/"&gt;Transitland&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mapzen.com/"&gt;Mapzen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://transit.land/playground/"&gt;Playground&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/srthurman/TransitTally"&gt;Transit Tally&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://leafletjs.com/reference.html"&gt;Leaflet documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="computer language"></category><category term="Python"></category></entry><entry><title>Java ADF and Learning Styles</title><link href="http://www.selectstarfromlanguages.com/java_adf_and_learning_styles.html" rel="alternate"></link><updated>2015-05-31T00:00:00+02:00</updated><author><name>Sara Thurman</name></author><id>tag:www.selectstarfromlanguages.com,2015-05-31:java_adf_and_learning_styles.html</id><summary type="html">&lt;p&gt;Some insights and reflections from the past week of learning.&lt;/p&gt;
&lt;h3&gt;Java ADF&lt;/h3&gt;
&lt;p&gt;I've been tasked with creating an auto-complete street input for work, using Java as the backend. In researching possible ways to accomplish the task, I came across the Java Application Development Framework (ADF) from Oracle. It has many neat built in functions, including &lt;a href="http://docs.oracle.com/cd/E23943_01/apirefs.1111/e12419/tagdoc/af_autoSuggestBehavior.html"&gt;autoSuggestBehavior&lt;/a&gt;, which you can use to create an auto-complete input box. I went through this &lt;a href="http://www.oracle.com/technetwork/developer-tools/adf/learnmore/62-autosuggestbehavior-177811.pdf"&gt;autoSuggestBehavior tutorial&lt;/a&gt; using my own data, and got things somewhat working (e.g. it finally compiled, but didn't function correctly).&lt;/p&gt;
&lt;p&gt;At that point, I had only invested a few hours in ADF, and thought it wise to see if my supervisor viewed ADF a good framework choice for the project. She did not, so I will leave things only somewhat working to pursue other options. If you're interested in learning more about ADF, which does have a solid base of built in functionality, check out this article on &lt;a href="https://technology.amis.nl/2013/01/26/dear-javajee-developer-why-should-you-care-about-adf/"&gt;why you should care about ADF&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Learning Styles&lt;/h3&gt;
&lt;p&gt;Much can be gained by examining others learning habits. I'm looking at it in regards to programming and foreign languages specifically, but there are generalities that can be made regardless of the subject matter.&lt;/p&gt;
&lt;p&gt;In reading several articles on the wonderful &lt;a href="https://www.verbling.com/articles/"&gt;Verbling blog&lt;/a&gt;, I've been struck by the variety of methods accomplished polyglots use, and also some of the consistent advice. Different methods (some used by the same person as their preference for learning style has evolved over time) include structured study up front, only speaking with others after a year or more, jumping right in with speech and trying to learn as you go, and spending a lot of time listening to the language before ever trying to learn words and grammar.&lt;/p&gt;
&lt;p&gt;The overlap comes with the admonition to use a style that you enjoy, and to have fun! I know I can get trapped in the idea of finding the "best" way to do something, while ignoring that the best ultimately comes down to what I'll actually follow through with. Yes, some methods can deliver results quicker than others, but that doesn't matter if you never stick with it long enough to see results. Nothing groundbreaking, but it's a good reminder from people who are accomplished at learning human languages. The same holds true for learning computer languages, or anything really.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Resources&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://docs.oracle.com/cd/E23943_01/apirefs.1111/e12419/tagdoc/af_autoSuggestBehavior.html"&gt;autoSuggestBehavior&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.oracle.com/technetwork/developer-tools/adf/learnmore/62-autosuggestbehavior-177811.pdf"&gt;Oracle autoSuggestBehavior tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://vtkrishn.com/2012/07/17/afautosuggestbehavior-intro/"&gt;Java ADF af:autosuggestBehavior intro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://technology.amis.nl/2013/01/26/dear-javajee-developer-why-should-you-care-about-adf/"&gt;why you should care about ADF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.verbling.com/articles/"&gt;Verbling blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.thepolyglotdream.com/"&gt;The Polyglot Dream&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="computer language"></category><category term="human language"></category><category term="java"></category></entry><entry><title>Meeting and Talking to People about Tech</title><link href="http://www.selectstarfromlanguages.com/west_coast_adventures_in_programming.html" rel="alternate"></link><updated>2015-05-24T00:00:00+02:00</updated><author><name>Sara Thurman</name></author><id>tag:www.selectstarfromlanguages.com,2015-05-24:west_coast_adventures_in_programming.html</id><summary type="html">&lt;p&gt;After spending last weekend in Sonoma for a wedding, I traveled up the coast to visit Portland, OR and Seattle, WA. While in Portland, I was able to meet with some cool people and attend a tech networking event.&lt;/p&gt;
&lt;h3&gt;Cool People&lt;/h3&gt;
&lt;p&gt;I reached out to two very nice people who work as developers in Portland, to see if I could meet with them and chat about their experiences while I was in town, and both of them were kind enough to take time out of their day to do so!
Jenny from &lt;a href="http://www.metaltoad.com/"&gt;Metal Toad&lt;/a&gt; showed me around the office, told me about some of the work she does now, and shared her experience transitioning into tech from a non-tech background. Thanks Jenny!
&lt;a href="http://pdxmele.com/"&gt;Mele&lt;/a&gt;, whom I met at the State of the Map conference in DC, also shared how she transitioned into tech from a more GIS/geography background (like me), as well as discussions on Python, and what can make you a manager in short order (people skills). Thanks Mele!&lt;/p&gt;
&lt;h3&gt;Keeping up with Tech&lt;/h3&gt;
&lt;p&gt;One question I put to both Jenny and Mele was "How do you keep up with technology?". The trends, new developments, new standards, etc. etc. The answer they both gave was basically "I don't". Not that they don't keep up with anything, they just don't try to keep up with ALL the things. Which was heartening to hear. It felt like that was a losing battle, and having two different professional developers say as much gave more credence to the idea.&lt;/p&gt;
&lt;p&gt;Both women said there are spaces at work for people to post articles and information of possible interest. That way information can be shared, but in a more limited, focused way. And of course there are tech events (often meetups) where you end up learning new things. But the point is, you don't need to have some exhaustive list of resources and a detailed plan for how you're going to learn about every new tech topic to be able to stay up to date with what you need to know.&lt;/p&gt;
&lt;h3&gt;Networking&lt;/h3&gt;
&lt;p&gt;I've been thinking about the hows and whys of networking lately. In trying to have a more long range view of my career, I realized I need to be meeting more people. It's not just about who might be able to connect you with a job, but also who you might be able to connect. Oh, you need an awesome front-end developer at your company? Well it just so happens I know one (or two or three)! Let's admit it, it feels good to our egos to be the match maker. For more on networking in general, I recommend the &lt;a href="http://www.ladylovescode.com/2015/04/13/networking-and-karaoke-with-paul-watts/"&gt;Lady Loves Code podcast episode with Paul Watts&lt;/a&gt; and John Sonmez's site &lt;a href="http://simpleprogrammer.com/"&gt;Simple Programmer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As luck would have it, there was a tech related networking event happening the Monday I was in Portland. &lt;a href="http://www.meetup.com/NewTechPDX/events/221190808/?a=co2_grp&amp;amp;gj=co2&amp;amp;rv=co2"&gt;New Tech PDX - IoT edition&lt;/a&gt; was a great chance to talk to people working in all different sectors and with various backgrounds. I met a startup founder, a student at &lt;a href="http://www.epicodus.com/"&gt;Epicodus&lt;/a&gt;, a professional musician with a tech hobby, and many more.&lt;/p&gt;
&lt;p&gt;I'll admit, it was a bit scary walking in at first, me being a pretty shy and introverted person. But the fact that the event was specifically for networking made it less of a mental hurdle. People wouldn't come to such an event (and especially wouldn't shell out $10) if they weren't interested in meeting others, right? Right! It was a great experience, and definitely bolstered my confidence to continue practicing talking with new people. If you're similarly shy, just get out there and try it. Especially if you're going to be out of your current place of residence. What have you got to lose really?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Resources&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.ladylovescode.com/2015/04/13/networking-and-karaoke-with-paul-watts/"&gt;Lady Loves Code podcast episode with Paul Watts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://simpleprogrammer.com/"&gt;Simple Programmer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="computer language"></category><category term="networking"></category><category term="portland"></category><category term="seattle"></category></entry><entry><title>TDD, using Duolingo, and PEP8 formatting</title><link href="http://www.selectstarfromlanguages.com/tdd_duolingo_and_pep8_ohmy.html" rel="alternate"></link><updated>2015-05-09T00:00:00+02:00</updated><author><name>Sara Thurman</name></author><id>tag:www.selectstarfromlanguages.com,2015-05-09:tdd_duolingo_and_pep8_ohmy.html</id><summary type="html">&lt;p&gt;Wow, it's been almost a month since my last post. Getting into a groove of regular writing can be tough, so I thought it made sense to switch gears a little and reflect on what I happened to learn in a given week (or so).&lt;/p&gt;
&lt;h3&gt;TDD&lt;/h3&gt;
&lt;p&gt;TDD, or &lt;a href="http://en.wikipedia.org/wiki/Test-driven_development"&gt;Test-Driven Development&lt;/a&gt;, has been on my radar ever since I heard of Harry Percivel's book on &lt;a href="http://www.obeythetestinggoat.com/"&gt;TDD in Python&lt;/a&gt;. A very cursory reading reveals that it's nothing more than the idea of&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Write a test before writing code&lt;/li&gt;
&lt;li&gt;Write code that will make the test pass&lt;/li&gt;
&lt;li&gt;Refactor the code&lt;/li&gt;
&lt;li&gt;Repeat&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That didn't really mean a whole lot to me though. The idea of writing a test before code seemed counter-intuitive. And what are all these testing frameworks? I finally watched the &lt;a href="http://www.lynda.com/Developer-Programming-Foundations-tutorials/Foundations-Programming-Test-Driven-Development/124398-2.html"&gt;Lynda.com course on TDD&lt;/a&gt; and it all started to click! In deciding on the tests, you're both organizing your code, and (hopefully) preventing the introduction of breaking changes. At least, you can identify those changes early, and locate them precisely.&lt;/p&gt;
&lt;p&gt;This practice would have been a big help on my first project in my current job. The code base isn't very large - just one JavaScript file with a bunch of methods - but it still got confusing pretty quickly. And looking at the code, I can see where I have methods that are doing several different important things, making them very difficult to test. TDD could have also saved me the headache of redoing a bunch of manual tests every time I made a change.&lt;/p&gt;
&lt;p&gt;Ladies Who Code DC had a Meetup on &lt;a href="http://www.meetup.com/Ladies-Who-Code-Washington-DC/events/195560302/"&gt;Learning Programming through TDD&lt;/a&gt; this past week, which was very helpful in practicing my newly learned skill. We did pair programming, and I was able to work with someone who's been using TDD at work for a few months. It was a great learning experience, and I look forward to employing the method in my personal and work projects in the future. Who knows, maybe I'll even get a chance to refactor that first bit of JavaScript code from projects past.&lt;/p&gt;
&lt;h3&gt;Duolingo&lt;/h3&gt;
&lt;p&gt;In my first post on learning French, I stated my intent to use the Fluent Forever method. Well, I did make it through the minimal pairs and pronunciation decks I purchased, but have stalled out on making all the flash cards for vocabulary. It's been taking much longer than I anticipated, and quite frankly, I find it really boring. Especially when I have other things I could be doing that feel either more productive or more interesting.&lt;/p&gt;
&lt;p&gt;I tried thinking up ways to automate the task, but ultimately decided against it. The primary thing I want to do away with is having to choose the images for words/phrases one by one. However, doing so is genuinely useful for learning, and I would likely have to go back to choose new images when what I auto-collected wasn't on target. It might end up taking as much or more time than doing the selection by hand.&lt;/p&gt;
&lt;p&gt;Enter &lt;a href="https://www.duolingo.com/"&gt;Duolingo&lt;/a&gt;. If you don't know about Duolingo, it's a free web and mobile language learning platform. They have been adding a bunch of new languages (Klingon is coming soon) and it's a really robust product. I used it briefly prior to going to Paris a few years ago, and really enjoyed it then. They've made improvements since that time, and I just think it's a great product. The main selling point(s) are being able to jump right in, no prep work required, and the cost.&lt;/p&gt;
&lt;p&gt;I'm not going at a breakneck pace. Just spending some time every day first reviewing what I've learned previously, then doing a few new lessons. I'm still slowly gathering the materials for the flash cards a la Fluent Forever, but I wanted to be actively learning while doing so. And podcasts continue to be a good way to practice listening, since the robot voice in Duolingo can be a bit odd. Not to mention that you're only getting a single word or sentence at a time.&lt;/p&gt;
&lt;h3&gt;PEP8&lt;/h3&gt;
&lt;p&gt;PEP8 is the &lt;a href="https://www.python.org/dev/peps/pep-0008/"&gt;style guide for Python&lt;/a&gt;. Super exciting I know. Well, the other day, an acquaintance was telling me about the many aggravating discussions that happen over coding style at his job. He suggested using PEP8, and built a little tool that everyone could use to clean up their code according to those standards. It appears disagreements continue for him, but I thought that was a pretty smart idea.&lt;/p&gt;
&lt;p&gt;Since I use Sublime Text as my text editor at home. I installed the &lt;a href="https://github.com/wistful/SublimeAutoPEP8"&gt;AutoPEP8 package&lt;/a&gt; and it's really easy to use. You can just change the code, or run a preview first. On Linus the shortcuts are &lt;code&gt;ctrl + shift + 8&lt;/code&gt; to reformat my code, and &lt;code&gt;ctrl + 8&lt;/code&gt; to show a preview of what's to be changed. The preview functionality looks a bit like changes shown with git. For instance, I tried putting two lines on one, separating them by a ;. Here's what the reformatting preview looks like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;     &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_Add_method_multiple_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;        &lt;span class="n"&gt;numList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)];&lt;/span&gt;&lt;span class="n"&gt;numString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numList&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt;        &lt;span class="n"&gt;numList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt;        &lt;span class="n"&gt;numString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numList&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Calculator&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numString&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That's easy enough! The line with a &lt;code&gt;-&lt;/code&gt; will be removed, and the lines with the &lt;code&gt;+&lt;/code&gt; will be added. Cool!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Resources&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.obeythetestinggoat.com/"&gt;TDD in Python Book&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.lynda.com/Developer-Programming-Foundations-tutorials/Foundations-Programming-Test-Driven-Development/124398-2.html"&gt;Lynda.com course on TDD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.duolingo.com/"&gt;Duolingo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.python.org/dev/peps/pep-0008/"&gt;PEP8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/wistful/SublimeAutoPEP8"&gt;AutoPEP8 package for Sublime Text&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="human language"></category><category term="computer language"></category><category term="french"></category><category term="python"></category><category term="tdd"></category><category term="testing"></category></entry><entry><title>Object Oriented Principles Part 1: Python</title><link href="http://www.selectstarfromlanguages.com/oo_principles_Python.html" rel="alternate"></link><updated>2015-04-12T00:00:00+02:00</updated><author><name>Sara Thurman</name></author><id>tag:www.selectstarfromlanguages.com,2015-04-12:oo_principles_Python.html</id><summary type="html">&lt;p&gt;For my latest assignment at work, I needed to learn Java, which seemed a little daunting at first. As I was going through tutorials, I was presented with a lot of Object Oriented concepts I had not come into contact with before. I knew what objects and classes were, and was familiar with the idea of inheritance. But other concepts, like interfaces, constructors, and polymorphism, were new ideas, or at least new vocabulary.&lt;/p&gt;
&lt;p&gt;I decided to go back and learn about the basics of OO Programming, and to investigate how some of these concepts are applied in Python and Javascript. This is part 1 of 2, exploring OO Programming and Python.&lt;/p&gt;
&lt;p&gt;It may be helpful to check out one of the resources below if you're rusty on or totally unfamiliar with OO programming. I won't go into the more common concepts in as much depth.&lt;/p&gt;
&lt;p&gt;For reference, I'm using Python 2.7. Some of these details might be different for Python 3.&lt;/p&gt;
&lt;h3&gt;Class&lt;/h3&gt;
&lt;p&gt;A class is the blueprint for an object. It tells what attributes (variables/data) and methods (functions) an object should have. The basic syntax is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;className&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parentObject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pretty simple. Let's see an example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DothrakiMan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hairLength&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
        &lt;span class="c"&gt;## Units are inches, because Dothraki don&amp;#39;t use the metric system either&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hairLength&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hairLength&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;cutHair&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;hairLength&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;      
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here we have a class to create a &lt;code&gt;DothrakiMan&lt;/code&gt;. We've included the attributes of a &lt;code&gt;name&lt;/code&gt;, and his &lt;code&gt;hairLength&lt;/code&gt;. He can cut his hair and, well that's it for now.&lt;/p&gt;
&lt;h3&gt;Object&lt;/h3&gt;
&lt;p&gt;An object is an &lt;em&gt;instance&lt;/em&gt; of a class. In other words, an object is the thing you create with a class. Let's see an example.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Drogo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DothrakiMan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Khal Drogo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;48&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;       
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we have the &lt;strong&gt;object&lt;/strong&gt; &lt;code&gt;Drogo&lt;/code&gt;, made from the &lt;strong&gt;class&lt;/strong&gt; &lt;code&gt;DothrakiMan&lt;/code&gt;. You can make as many objects as you want from that one class.&lt;/p&gt;
&lt;p&gt;Now that the bare basics are out of the way, let's talk about some more interesting topics.&lt;/p&gt;
&lt;h3&gt;Encapsulation&lt;/h3&gt;
&lt;p&gt;There are two components to encapsulation.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Grouping data and functions into a single, logical group.&lt;/li&gt;
&lt;li&gt;Protecting those data and methods/preventing unauthorized access, aka "data hiding".&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In defining the term, some sources use just one component, some use both. Whatever the case, encapsulation is most often acheived through the use of classes (there are exceptions, which we'll see with Javascript). The whole purpose of a class is to group data and functionality into a convenient package.&lt;/p&gt;
&lt;p&gt;Python really only uses the first component. Data hiding is kind of possible, but not fully.&lt;/p&gt;
&lt;p&gt;A little background: in Java, when creating data or methods, you include the keyword &lt;code&gt;public&lt;/code&gt;, &lt;code&gt;private&lt;/code&gt;, or &lt;code&gt;protected&lt;/code&gt;. Those define whether or not you can directly access an item from the object created from a given class. If we pretend we created our class &lt;code&gt;DothrakiMan&lt;/code&gt; and object &lt;code&gt;Drogo&lt;/code&gt; in Java, and set the &lt;code&gt;name&lt;/code&gt; attribute as private, trying &lt;code&gt;Drogo.name&lt;/code&gt; would fail.&lt;/p&gt;
&lt;p&gt;Here's an example of the different methods of data hiding in Python:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;EncapsulationClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pub&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;semi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prv&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pub&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_semiPrivate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;semi&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__private&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;prv&lt;/span&gt;

&lt;span class="n"&gt;encapsulateObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;EncapsulationClass&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In our &lt;code&gt;EncapsulationCLass&lt;/code&gt; class, we have three different attributes. The first one, &lt;code&gt;self.public&lt;/code&gt;, we have seen before. You can access it directly on an object like &lt;code&gt;encapsulateObject.public&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In the second attribute, &lt;code&gt;self._semiPrivate&lt;/code&gt;, the underscore at the beginning of the name denotes that this attribute should be regarded as private. It's letting others know they shouldn't access it directly. However, there is no enforced protection. &lt;code&gt;encapsulateObject._semiPrivate&lt;/code&gt; would run without error, and return the value of the attribute.&lt;/p&gt;
&lt;p&gt;The last attribute has two _ at the beginning, and does provide a little extra protection through "name mangling." If you were to try to run &lt;code&gt;encapsulateObject.__private&lt;/code&gt;, you would get the error below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="ne"&gt;AttributeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;EncapsulationClass&amp;#39;&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="n"&gt;no&lt;/span&gt; &lt;span class="n"&gt;attribute&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__private&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But if you ran &lt;code&gt;encapsulateObject._EncapsulationClass__private&lt;/code&gt;, blamo, you have access to the attribute. So by using &lt;code&gt;objectName._className__privateAttributeName&lt;/code&gt; you can access those so called private attributes and methods.&lt;/p&gt;
&lt;h3&gt;Constructor&lt;/h3&gt;
&lt;p&gt;A constructor is a special method that's called when an object is &lt;em&gt;created&lt;/em&gt;. It's where you pass in and set any data you want the object to have. In the example above, with &lt;code&gt;DothrakiMan&lt;/code&gt;, it looks like we're passing in and setting the attributes of the object with &lt;code&gt;__init__&lt;/code&gt;. So &lt;code&gt;__init__&lt;/code&gt; must be the constructor!&lt;/p&gt;
&lt;p&gt;Actually, no. &lt;code&gt;__init__&lt;/code&gt; is technically an initializer. The method &lt;code&gt;__new__&lt;/code&gt; gets called first, and it is what creates the new instance, a.k.a. a new object. After the new object has been created, &lt;code&gt;__init__&lt;/code&gt; sets the data on the object. The article &lt;a href="http://agiliq.com/blog/2012/06/__new__-Python/"&gt;&lt;strong&gt;new&lt;/strong&gt;() in Python&lt;/a&gt; gives a good, in depth explanation, better than I'm able to.&lt;/p&gt;
&lt;p&gt;If this seems confusing, and you don't really get exactly what that means, that's ok. To be honest, I don't 100% understand the nuances, at least not in any practical sense. More importantly, you don't really need to know this to write a Python program. Odds are you're not going to need to touch &lt;code&gt;__new__&lt;/code&gt;, so unless you have a specific reason to muck with it, don't worry about it. &lt;/p&gt;
&lt;h3&gt;Inheritance&lt;/h3&gt;
&lt;p&gt;Inheritance is the process of one class, the "child", taking on the attributes and methods of another class, the "parent". It's often referred to an "Is-A" relationship. For instance, a &lt;code&gt;Cat&lt;/code&gt; is a(n) &lt;code&gt;Animal&lt;/code&gt;, and a &lt;code&gt;Car&lt;/code&gt; is a &lt;code&gt;Vehicle&lt;/code&gt;. The syntax is super simple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ChildClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ParentClass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can redefine methods in the child class that exist in the parent class if you want different behavior. You can also add classes and attributes to the child class that don't exist in the parent class.&lt;/p&gt;
&lt;p&gt;Python supports multiple inheritance, meaning a child class can have multiple parents. Syntax is similarly straightforward:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ChildClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ParentClass1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ParentClass2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ParentClass3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Multiple inheritance can be pretty tricky in terms of maintaing your code. &lt;a href="http://learnPythonthehardway.org/book/ex44.html"&gt;Learn Python the Hard Way, lesson 44&lt;/a&gt; has a good explanation of how to implement inheritance, as well as pitfalls to watch out for.&lt;/p&gt;
&lt;p&gt;Abstract Base Classes (ABC) are an interesting part of inheritance. An ABC only exists to be inherited from, you can't create an instance of it. The concept exists for cases when you need a parent class that groups together most functionality, but you would never want an object created from that class. Using our example of &lt;code&gt;DothrakiMan&lt;/code&gt; from above, we might want to create a &lt;code&gt;DothrakiPerson&lt;/code&gt; parent class which contains some basic information that would apply to a man, woman, or child.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DothrakiPerson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;      
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Right now anyone could make a &lt;code&gt;DothrakiPerson&lt;/code&gt; object. To change this to an ABC in Python, you use the &lt;code&gt;abc&lt;/code&gt; module (and you know what that stands for now). &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;abc&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ABCMeta&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;abstractmethod&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DothrakiPerson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;__metaclass__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ABCMeta&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;

&lt;span class="nd"&gt;@abstractmethod&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;person_type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There are two things going on here:
1. At the beginning, set &lt;code&gt;__metaclass__&lt;/code&gt; = ABCMeta&lt;code&gt;2. Add&lt;/code&gt;@abstractmethod&lt;code&gt;decorator to a method, here&lt;/code&gt;person_type`, to turn that into a &lt;em&gt;virtual&lt;/em&gt; method. A virtual method is one which must exist on the child class, but which the parent may not implement.&lt;/p&gt;
&lt;p&gt;An alternative way to create a virtual method is&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;person_type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;NotImplementedError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;You need to implement the person_type method&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that if you don't include the &lt;code&gt;@abstractmethod&lt;/code&gt; decorator on any methods, you will still be allowed to create an instance of the ABC class, &lt;code&gt;DothrakiPerson&lt;/code&gt;. &lt;/p&gt;
&lt;h3&gt;Interfaces&lt;/h3&gt;
&lt;p&gt;In other object oriented languages, like Java, you are always tied to the type of a thing. Is it a string, an integer, a DothrakiMan? When creating a function/method, all the inputs have their types declared, and you won't be able to even attempt execution if you pass something of a different type.&lt;/p&gt;
&lt;p&gt;The purpose of all this type checking is that you know exactly what attributes and methods you have available, and thus what actions you can take on/with your objects. You can write your code knowing what you can access, even if not the specifics (you know that any &lt;code&gt;DothrakiMan&lt;/code&gt; will have a &lt;code&gt;name&lt;/code&gt; attribute, though you won't know that name until an instance of &lt;code&gt;DothrakiMan&lt;/code&gt; has been created).&lt;/p&gt;
&lt;p&gt;Interfaces are a way of adding flexibility. They are nothing more than a list of empty methods that any class that uses ("implements") that interface must define. So you could have 10 very different classes all implementing the same interface. In addition, a class can implement multiple interfaces.&lt;/p&gt;
&lt;p&gt;Their utility comes from being able to check for, and base actions off of, this interface rather than a type. Let's say you have a function that takes an object as input. You want to call the &lt;code&gt;ride()&lt;/code&gt; method on that input object. That could be a horse, a bike, a ferris wheel, and more. In some cases you can have a parent class everything inherits from, and you can check for that parent relationship, as any methods available in the parent is also in the child. Since it isn't likely, in this example, that there's a logical parent class, you would need to create a different function for each different type of input you want. If instead these disparate objects all had classes that implemented some interface with a &lt;code&gt;ride&lt;/code&gt; method, you no longer need different functions! You just have one function which checks for that interface.&lt;/p&gt;
&lt;p&gt;Ok ok, get to the Python. Well, that was a lot of explanation just to tell you there are no interfaces in Python, at least not formally. ABC's and their virtual classes are the closest approximation Python has.&lt;/p&gt;
&lt;p&gt;So why doesn't Python have interfaces? You don't need them! Python is a 'duck-typed' language. That means it's so easy, a duck could do it. Wait, no, that's a lie. It comes from the concept of the "duck test" - if you've got an animal that walks like a duck, swims like a duck, quacks like a duck, it must be a duck. Wikipedia sums it up nicely:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[I]n duck typing, an object's suitability is determined by the presence of certain methods and properties (with appropriate meaning), rather than the actual type of the object.
- &lt;a href="http://en.wikipedia.org/wiki/Duck_typing"&gt;Wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can check the type of an object and base action off of that, but it's usually a bad idea. If nothing else, that indicates a possible flaw in your class design - any functionality tied directly to the type of an object should usually be a part of that object (there are always exceptions though). Instead you can use the &lt;code&gt;hasattr&lt;/code&gt; or &lt;code&gt;getattr&lt;/code&gt; methods to check for presence of an attribute or method.&lt;/p&gt;
&lt;h3&gt;Composition&lt;/h3&gt;
&lt;p&gt;Composition, in contrast to inheritance, is a "Has-A" relationship. It represents a relationship between classes that doesn't depend on a parent/child relationship. For instance, a &lt;code&gt;Cat&lt;/code&gt; has a &lt;code&gt;Tail&lt;/code&gt;, or a &lt;code&gt;Dothraki&lt;/code&gt; has a &lt;code&gt;Horse&lt;/code&gt;. Composition works by creating an instance (an object) of one class in another class.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Horse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DothrakiMan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hairLength&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hairLength&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hairLength&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;horse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Horse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;    
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now every time you create a new &lt;code&gt;DothrakiMan&lt;/code&gt;, he will have a &lt;code&gt;Horse&lt;/code&gt;. But what about those attributes we put in &lt;code&gt;DothrakiPerson&lt;/code&gt;? We haven't said to inherit from that class, so we don't have a &lt;code&gt;name&lt;/code&gt; or &lt;code&gt;age&lt;/code&gt; on our objects. You can accomplish the same thing with composition:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Horse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DothrakiPerson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DothrakiMan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hairLength&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dothrakiPerson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DothrakiPerson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hairLength&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hairLength&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;horse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Horse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dothrakiPerson&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Whaaat. Yup. You can create a new &lt;code&gt;DothrakiPerson&lt;/code&gt; instance, and just use that instance's attributes and methods. Make sure your parent class isn't an ABC or this won't work.&lt;/p&gt;
&lt;p&gt;Using composition over inheritance is preferred in OO Programming. There aren't hard and fast rules for when to use what. Zed Shaw has a good, brief list in &lt;a href="http://learnPythonthehardway.org/book/ex44.html#composition"&gt;Learn Python the Hard Way&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Polymorphism&lt;/h3&gt;
&lt;p&gt;This concept really confused me the first time I heard it defined. And the second. And probably a few more times after that. My best crack at defining it is that polymorphism refers to&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The ability of a piece of code, given an input, to execute on that input as long as it has the required methods and attributes.&lt;/li&gt;
&lt;li&gt;The fact that the specific behavior of an attribute or method may differ between classes.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;An example of each. For item 1:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;polyFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here, we could input strings, integers, lists, any 2 items with the &lt;code&gt;__add__&lt;/code&gt; method.&lt;/p&gt;
&lt;p&gt;And for item 2:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sayHello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AmericanPerson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sayHello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Hello&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FrenchPerson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sayHello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Bonjour&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Both an &lt;code&gt;AmericanPerson&lt;/code&gt; and a &lt;code&gt;FrenchPerson&lt;/code&gt; have a &lt;code&gt;sayHello&lt;/code&gt; method, but the output is different for each. If you were writing code that calls the &lt;code&gt;sayHello&lt;/code&gt; method, you could pass in either.&lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Phew, that was a lot. I encourage you to explore the resources listed below to get more information and clarification. I hope I haven't led anyone astray or caused any confusion.&lt;/p&gt;
&lt;p&gt;If you see any errors, factual, grammatical, whatever else, please feel free to submit it as an issue on the repository &lt;a href="https://github.com/srthurman/selectstarfromlanguages/issues"&gt;issues page&lt;/a&gt; on github.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Resources&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.jeffknupp.com/blog/2014/06/18/improve-your-Python-Python-classes-and-object-oriented-programming/"&gt;Jeff Knupp - Python Classes and OO Programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://learnPythonthehardway.org/book/index.html"&gt;Learn Python the Hard Way - Lessons 40-44&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.lynda.com/Programming-tutorials/Foundations-of-Programming-Object-Oriented-Design/96949-2.html"&gt;Lynda.com - Object-Oriented Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.Python-course.eu/object_oriented_programming.php"&gt;Python-course.eu - Object Oriented Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://lgiordani.com/blog/2014/08/21/python-3-oop-part-4-polymorphism/#.VSrjKOnd_IE"&gt;Good Morning, Polymorphism&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://agiliq.com/blog/2012/06/__new__-Python/"&gt;__new__() in Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="computer language"></category><category term="Python"></category><category term="java"></category><category term="object oriented"></category></entry><entry><title>Plan of attack for learning French</title><link href="http://www.selectstarfromlanguages.com/how_im_learning_french.html" rel="alternate"></link><updated>2015-03-29T00:00:00+01:00</updated><author><name>Sara Thurman</name></author><id>tag:www.selectstarfromlanguages.com,2015-03-29:how_im_learning_french.html</id><summary type="html">&lt;p&gt;I want to share the resources I'm using to learn French. I started this a grand total of 5 days ago, so this isn't a review.&lt;/p&gt;
&lt;h3&gt;Fluent Forever&lt;/h3&gt;
&lt;p&gt;The main technique I'll be using is that outlined by Gabriel Wyner in his book and site &lt;a href="https://fluent-forever.com/"&gt;Fluent Forever&lt;/a&gt; (FF). The basic idea is that you first train your ears to hear your new language, then start learning a base vocabulary of 625 words using only pictures, no direct translation. From there you go on to grammar and making real, comprehensible sentences. All learning is based around using the spaced repetition learning technique, using the spaced repetition software (SRS) &lt;a href="http://ankisrs.net/"&gt;Anki&lt;/a&gt;. Anki, aside from being free, is also open source and written in Python. I'll do a future post going into more detail, but if any of that is interesting to you, check out the &lt;a href="http://ankisrs.net/docs/addons.html"&gt;docs&lt;/a&gt; on creating add-ons.&lt;/p&gt;
&lt;p&gt;Wait a minute - why would you need to train your ears before diving into vocabulary? Because there are sounds you physically cannot hear currently! Your brain just can't distinguish them. And if you can't hear a certain sound, you certainly won't be able to make that sound when speaking. Not to mention the whole not being able to understand what other people are saying thing. Gabe goes into more detail in the book, and it's pretty interesting, at least to me.&lt;/p&gt;
&lt;p&gt;One of the coolest parts about FF is that Gabe sells pronunciation trainers and professional audio recordings of all 625 words in the base word list, but he also tells you exactly how to do it yourself. And he does so on the site, not just the book. The book goes into more detail, but you don't &lt;em&gt;have&lt;/em&gt; to get it to know what to do. Benefits:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The whole process can be totally free!&lt;/li&gt;
&lt;li&gt;You can create resources for a language FF doesn't cover.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I bought the French pronunciation trainer and word list bundle. It was $20 and saves so much time. You can visit &lt;a href="https://fluent-forever.com/bundles/"&gt;the shop&lt;/a&gt; if you want to buy one too.&lt;/p&gt;
&lt;h3&gt;Podcasts&lt;/h3&gt;
&lt;p&gt;I'll be supplementing this primary training with a podcast or two. The podcasts aren't for memorizing any specific words or grammar rules, but just for listening to French spoken more naturally, not just the isolated words of initial vocab training. I've been testing a few out, and so far I've liked &lt;a href="http://www.learnfrenchbypodcast.com/"&gt;Learn French by Podcast&lt;/a&gt; and &lt;a href="https://radiolingua.com/coffeebreakfrench/"&gt;Coffee Break French&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Disclaimer: I am in no way affiliated with Fluent Forever, Learn French by Podcast, nor Coffee Break French.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Resources&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://fluent-forever.com/"&gt;Fluent Forever&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ankisrs.net/"&gt;Anki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.learnfrenchbypodcast.com/"&gt;Learn French by Podcast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://radiolingua.com/coffeebreakfrench/"&gt;Coffee Break French&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="human language"></category><category term="french"></category><category term="anki"></category></entry><entry><title>Learning programming == learning foreign language?</title><link href="http://www.selectstarfromlanguages.com/learning-lang-equals-learning-lang.html" rel="alternate"></link><updated>2015-03-21T00:00:00+01:00</updated><author><name>Sara Thurman</name></author><id>tag:www.selectstarfromlanguages.com,2015-03-21:learning-lang-equals-learning-lang.html</id><summary type="html">&lt;p&gt;Did you know several states in the US have or have proposed measures that would allow substituting learning computer programming instead of taking a foreign language? Did you know that's possibly not that far off the mark? In many cases the push is to have the programming courses count as a math or science credit, but looking at (admittedly limited) evidence, it might make just as much sense to make it a language credit.&lt;/p&gt;
&lt;p&gt;Researchers from several universities and other organizations took a peek inside programmers brains using an fMRI machine while they were reading code snippets. The results:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We found a strong relation to language processing. To understand source code, participants had to process single words and symbols as well as statements that consist of single words.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To be fair, this is only one study, and the participants weren't actually writing code. By that measure it seems unsurprising that reading code would involve language processing. So perhaps adding Java or Python to the list of foreign languages offered is a bit premature.&lt;/p&gt;
&lt;p&gt;There are detractors to the teaching of foreign languages in school at all. To those people, perhaps the substitution would make sense based on a more economic, what's going to give the most tangible benefit, viewpoint.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;All of this study seems to totally fail to teach people how to fluently speak foreign languages. So we can actually see in the data is that under 1 percent of Americans have learned to speak a foreign language very well in school.&lt;/li&gt;
&lt;li&gt;It’s pretty close to about one sixth of the time that students are spending in high school assuming that they start the foreign language in high school...And remember there is something else that students could be learning at that time. &lt;/li&gt;
&lt;li&gt;-Bryan Caplan of George Mason University (from episode 158 of the Freakonomics podcast)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Caplan doesn't talk about programming as the "something else", but that's certainly an option. And since English is already the lingua franca for many around the world, at least in business/professional contexts, learning to program could provide more financial benefits than knowing a foreign language.&lt;/p&gt;
&lt;p&gt;I'm not actually advocating any particular position, I just found these data very interesting. And apropros for the first post. The questions of if we should be teaching kids to code, to speak a foreign language, and what the benefits of both may be are much bigger than this one post. But you reader (hi mom) are probably an adult, so you get to decide for yourself! Personal or professional, it's your choice.&lt;/p&gt;
&lt;p&gt;Now I would like to know how many people that speak a foreign language are polyglots vs those that know programming languages.&lt;/p&gt;
&lt;p&gt;I would like to thank the CodeNewbie podcast and William Jeffries for providing the inspiration for this post. I hadn't heard of the fMRI research before William mentioned it.&lt;/p&gt;
&lt;p&gt;Resources:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.infosun.fim.uni-passau.de/cl/publications/docs/SKA+14.pdf"&gt;Understanding Understanding Source Code with Functional Magnetic Resonance Imaging&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.fastcolabs.com/3029364/this-is-your-brain-on-code-according-to-functional-mri-imaging"&gt;This Is Your Brain On Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.huffingtonpost.com/chris-parnin/scientists-begin-looking-_b_4829981.html"&gt;Scientists Begin Looking at Programmers' Brains&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.techrepublic.com/article/coding-as-a-second-language-kentucky-jockeys-to-be-next-to-join-the-movement/"&gt;Coding as a second language?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://freakonomics.com/2014/03/06/is-learning-a-foreign-language-really-worth-it-a-new-freakonomics-radio-podcast/"&gt;Is Learning a Second Language Really Worth It? - Freakonomics Podcast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.codenewbie.org/podcast/from-student-project-to-big-app"&gt;From Student Project to Big App - CodeNewbie Podcast&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="human language"></category><category term="computer language"></category></entry></feed>