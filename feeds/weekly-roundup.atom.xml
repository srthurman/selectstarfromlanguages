<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Select * from Languages</title><link href="http://www.selectstarfromlanguages.com/" rel="alternate"></link><link href="http://www.selectstarfromlanguages.com/feeds/weekly-roundup.atom.xml" rel="self"></link><id>http://www.selectstarfromlanguages.com/</id><updated>2015-05-31T00:00:00+02:00</updated><entry><title>Java ADF and Learning Styles</title><link href="http://www.selectstarfromlanguages.com/java_adf_and_learning_styles.html" rel="alternate"></link><updated>2015-05-31T00:00:00+02:00</updated><author><name>Sara Thurman</name></author><id>tag:www.selectstarfromlanguages.com,2015-05-31:java_adf_and_learning_styles.html</id><summary type="html">&lt;p&gt;Some insights and reflections from the past week of learning.&lt;/p&gt;
&lt;h3&gt;Java ADF&lt;/h3&gt;
&lt;p&gt;I've been tasked with creating an auto-complete street input for work, using Java as the backend. In researching possible ways to accomplish the task, I came across the Java Application Development Framework (ADF) from Oracle. It has many neat built in functions, including &lt;a href="http://docs.oracle.com/cd/E23943_01/apirefs.1111/e12419/tagdoc/af_autoSuggestBehavior.html"&gt;autoSuggestBehavior&lt;/a&gt;, which you can use to create an auto-complete input box. I went through this &lt;a href="http://www.oracle.com/technetwork/developer-tools/adf/learnmore/62-autosuggestbehavior-177811.pdf"&gt;autoSuggestBehavior tutorial&lt;/a&gt; using my own data, and got things somewhat working (e.g. it finally compiled, but didn't function correctly).&lt;/p&gt;
&lt;p&gt;At that point, I had only invested a few hours in ADF, and thought it wise to see if my supervisor viewed ADF a good framework choice for the project. She did not, so I will leave things only somewhat working to pursue other options. If you're interested in learning more about ADF, which does have a solid base of built in functionality, check out this article on &lt;a href="https://technology.amis.nl/2013/01/26/dear-javajee-developer-why-should-you-care-about-adf/"&gt;why you should care about ADF&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Learning Styles&lt;/h3&gt;
&lt;p&gt;Much can be gained by examining others learning habits. I'm looking at it in regards to programming and foreign languages specifically, but there are generalities that can be made regardless of the subject matter.&lt;/p&gt;
&lt;p&gt;In reading several articles on the wonderful &lt;a href="https://www.verbling.com/articles/"&gt;Verbling blog&lt;/a&gt;, I've been struck by the variety of methods accomplished polyglots use, and also some of the consistent advice. Different methods (some used by the same person as their preference for learning style has evolved over time) include structured study up front, only speaking with others after a year or more, jumping right in with speech and trying to learn as you go, and spending a lot of time listening to the language before ever trying to learn words and grammar.&lt;/p&gt;
&lt;p&gt;The overlap comes with the admonition to use a style that you enjoy, and to have fun! I know I can get trapped in the idea of finding the "best" way to do something, while ignoring that the best ultimately comes down to what I'll actually follow through with. Yes, some methods can deliver results quicker than others, but that doesn't matter if you never stick with it long enough to see results. Nothing groundbreaking, but it's a good reminder from people who are accomplished at learning human languages. The same holds true for learning computer languages, or anything really.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Resources&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://docs.oracle.com/cd/E23943_01/apirefs.1111/e12419/tagdoc/af_autoSuggestBehavior.html"&gt;autoSuggestBehavior&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.oracle.com/technetwork/developer-tools/adf/learnmore/62-autosuggestbehavior-177811.pdf"&gt;Oracle autoSuggestBehavior tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://vtkrishn.com/2012/07/17/afautosuggestbehavior-intro/"&gt;Java ADF af:autosuggestBehavior intro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://technology.amis.nl/2013/01/26/dear-javajee-developer-why-should-you-care-about-adf/"&gt;why you should care about ADF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.verbling.com/articles/"&gt;Verbling blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.thepolyglotdream.com/"&gt;The Polyglot Dream&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="computer language"></category><category term="human language"></category><category term="java"></category></entry><entry><title>Meeting and Talking to People about Tech</title><link href="http://www.selectstarfromlanguages.com/west_coast_adventures_in_programming.html" rel="alternate"></link><updated>2015-05-24T00:00:00+02:00</updated><author><name>Sara Thurman</name></author><id>tag:www.selectstarfromlanguages.com,2015-05-24:west_coast_adventures_in_programming.html</id><summary type="html">&lt;p&gt;After spending last weekend in Sonoma for a wedding, I traveled up the coast to visit Portland, OR and Seattle, WA. While in Portland, I was able to meet with some cool people and attend a tech networking event.&lt;/p&gt;
&lt;h3&gt;Cool People&lt;/h3&gt;
&lt;p&gt;I reached out to two very nice people who work as developers in Portland, to see if I could meet with them and chat about their experiences while I was in town, and both of them were kind enough to take time out of their day to do so!
Jenny from &lt;a href="http://www.metaltoad.com/"&gt;Metal Toad&lt;/a&gt; showed me around the office, told me about some of the work she does now, and shared her experience transitioning into tech from a non-tech background. Thanks Jenny!
&lt;a href="http://pdxmele.com/"&gt;Mele&lt;/a&gt;, whom I met at the State of the Map conference in DC, also shared how she transitioned into tech from a more GIS/geography background (like me), as well as discussions on Python, and what can make you a manager in short order (people skills). Thanks Mele!&lt;/p&gt;
&lt;h3&gt;Keeping up with Tech&lt;/h3&gt;
&lt;p&gt;One question I put to both Jenny and Mele was "How do you keep up with technology?". The trends, new developments, new standards, etc. etc. The answer they both gave was basically "I don't". Not that they don't keep up with anything, they just don't try to keep up with ALL the things. Which was heartening to hear. It felt like that was a losing battle, and having two different professional developers say as much gave more credence to the idea.&lt;/p&gt;
&lt;p&gt;Both women said there are spaces at work for people to post articles and information of possible interest. That way information can be shared, but in a more limited, focused way. And of course there are tech events (often meetups) where you end up learning new things. But the point is, you don't need to have some exhaustive list of resources and a detailed plan for how you're going to learn about every new tech topic to be able to stay up to date with what you need to know.&lt;/p&gt;
&lt;h3&gt;Networking&lt;/h3&gt;
&lt;p&gt;I've been thinking about the hows and whys of networking lately. In trying to have a more long range view of my career, I realized I need to be meeting more people. It's not just about who might be able to connect you with a job, but also who you might be able to connect. Oh, you need an awesome front-end developer at your company? Well it just so happens I know one (or two or three)! Let's admit it, it feels good to our egos to be the match maker. For more on networking in general, I recommend the &lt;a href="http://www.ladylovescode.com/2015/04/13/networking-and-karaoke-with-paul-watts/"&gt;Lady Loves Code podcast episode with Paul Watts&lt;/a&gt; and John Sonmez's site &lt;a href="http://simpleprogrammer.com/"&gt;Simple Programmer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As luck would have it, there was a tech related networking event happening the Monday I was in Portland. &lt;a href="http://www.meetup.com/NewTechPDX/events/221190808/?a=co2_grp&amp;amp;gj=co2&amp;amp;rv=co2"&gt;New Tech PDX - IoT edition&lt;/a&gt; was a great chance to talk to people working in all different sectors and with various backgrounds. I met a startup founder, a student at &lt;a href="http://www.epicodus.com/"&gt;Epicodus&lt;/a&gt;, a professional musician with a tech hobby, and many more.&lt;/p&gt;
&lt;p&gt;I'll admit, it was a bit scary walking in at first, me being a pretty shy and introverted person. But the fact that the event was specifically for networking made it less of a mental hurdle. People wouldn't come to such an event (and especially wouldn't shell out $10) if they weren't interested in meeting others, right? Right! It was a great experience, and definitely bolstered my confidence to continue practicing talking with new people. If you're similarly shy, just get out there and try it. Especially if you're going to be out of your current place of residence. What have you got to lose really?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Resources&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.ladylovescode.com/2015/04/13/networking-and-karaoke-with-paul-watts/"&gt;Lady Loves Code podcast episode with Paul Watts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://simpleprogrammer.com/"&gt;Simple Programmer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="computer language"></category><category term="networking"></category><category term="portland"></category><category term="seattle"></category></entry><entry><title>TDD, using Duolingo, and PEP8 formatting</title><link href="http://www.selectstarfromlanguages.com/tdd_duolingo_and_pep8_ohmy.html" rel="alternate"></link><updated>2015-05-09T00:00:00+02:00</updated><author><name>Sara Thurman</name></author><id>tag:www.selectstarfromlanguages.com,2015-05-09:tdd_duolingo_and_pep8_ohmy.html</id><summary type="html">&lt;p&gt;Wow, it's been almost a month since my last post. Getting into a groove of regular writing can be tough, so I thought it made sense to switch gears a little and reflect on what I happened to learn in a given week (or so).&lt;/p&gt;
&lt;h3&gt;TDD&lt;/h3&gt;
&lt;p&gt;TDD, or &lt;a href="http://en.wikipedia.org/wiki/Test-driven_development"&gt;Test-Driven Development&lt;/a&gt;, has been on my radar ever since I heard of Harry Percivel's book on &lt;a href="http://www.obeythetestinggoat.com/"&gt;TDD in Python&lt;/a&gt;. A very cursory reading reveals that it's nothing more than the idea of&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Write a test before writing code&lt;/li&gt;
&lt;li&gt;Write code that will make the test pass&lt;/li&gt;
&lt;li&gt;Refactor the code&lt;/li&gt;
&lt;li&gt;Repeat&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That didn't really mean a whole lot to me though. The idea of writing a test before code seemed counter-intuitive. And what are all these testing frameworks? I finally watched the &lt;a href="http://www.lynda.com/Developer-Programming-Foundations-tutorials/Foundations-Programming-Test-Driven-Development/124398-2.html"&gt;Lynda.com course on TDD&lt;/a&gt; and it all started to click! In deciding on the tests, you're both organizing your code, and (hopefully) preventing the introduction of breaking changes. At least, you can identify those changes early, and locate them precisely.&lt;/p&gt;
&lt;p&gt;This practice would have been a big help on my first project in my current job. The code base isn't very large - just one JavaScript file with a bunch of methods - but it still got confusing pretty quickly. And looking at the code, I can see where I have methods that are doing several different important things, making them very difficult to test. TDD could have also saved me the headache of redoing a bunch of manual tests every time I made a change.&lt;/p&gt;
&lt;p&gt;Ladies Who Code DC had a Meetup on &lt;a href="http://www.meetup.com/Ladies-Who-Code-Washington-DC/events/195560302/"&gt;Learning Programming through TDD&lt;/a&gt; this past week, which was very helpful in practicing my newly learned skill. We did pair programming, and I was able to work with someone who's been using TDD at work for a few months. It was a great learning experience, and I look forward to employing the method in my personal and work projects in the future. Who knows, maybe I'll even get a chance to refactor that first bit of JavaScript code from projects past.&lt;/p&gt;
&lt;h3&gt;Duolingo&lt;/h3&gt;
&lt;p&gt;In my first post on learning French, I stated my intent to use the Fluent Forever method. Well, I did make it through the minimal pairs and pronunciation decks I purchased, but have stalled out on making all the flash cards for vocabulary. It's been taking much longer than I anticipated, and quite frankly, I find it really boring. Especially when I have other things I could be doing that feel either more productive or more interesting.&lt;/p&gt;
&lt;p&gt;I tried thinking up ways to automate the task, but ultimately decided against it. The primary thing I want to do away with is having to choose the images for words/phrases one by one. However, doing so is genuinely useful for learning, and I would likely have to go back to choose new images when what I auto-collected wasn't on target. It might end up taking as much or more time than doing the selection by hand.&lt;/p&gt;
&lt;p&gt;Enter &lt;a href="https://www.duolingo.com/"&gt;Duolingo&lt;/a&gt;. If you don't know about Duolingo, it's a free web and mobile language learning platform. They have been adding a bunch of new languages (Klingon is coming soon) and it's a really robust product. I used it briefly prior to going to Paris a few years ago, and really enjoyed it then. They've made improvements since that time, and I just think it's a great product. The main selling point(s) are being able to jump right in, no prep work required, and the cost.&lt;/p&gt;
&lt;p&gt;I'm not going at a breakneck pace. Just spending some time every day first reviewing what I've learned previously, then doing a few new lessons. I'm still slowly gathering the materials for the flash cards a la Fluent Forever, but I wanted to be actively learning while doing so. And podcasts continue to be a good way to practice listening, since the robot voice in Duolingo can be a bit odd. Not to mention that you're only getting a single word or sentence at a time.&lt;/p&gt;
&lt;h3&gt;PEP8&lt;/h3&gt;
&lt;p&gt;PEP8 is the &lt;a href="https://www.python.org/dev/peps/pep-0008/"&gt;style guide for Python&lt;/a&gt;. Super exciting I know. Well, the other day, an acquaintance was telling me about the many aggravating discussions that happen over coding style at his job. He suggested using PEP8, and built a little tool that everyone could use to clean up their code according to those standards. It appears disagreements continue for him, but I thought that was a pretty smart idea.&lt;/p&gt;
&lt;p&gt;Since I use Sublime Text as my text editor at home. I installed the &lt;a href="https://github.com/wistful/SublimeAutoPEP8"&gt;AutoPEP8 package&lt;/a&gt; and it's really easy to use. You can just change the code, or run a preview first. On Linus the shortcuts are &lt;code&gt;ctrl + shift + 8&lt;/code&gt; to reformat my code, and &lt;code&gt;ctrl + 8&lt;/code&gt; to show a preview of what's to be changed. The preview functionality looks a bit like changes shown with git. For instance, I tried putting two lines on one, separating them by a ;. Here's what the reformatting preview looks like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;     &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_Add_method_multiple_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;        &lt;span class="n"&gt;numList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)];&lt;/span&gt;&lt;span class="n"&gt;numString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numList&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt;        &lt;span class="n"&gt;numList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt;        &lt;span class="n"&gt;numString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numList&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Calculator&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numString&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That's easy enough! The line with a &lt;code&gt;-&lt;/code&gt; will be removed, and the lines with the &lt;code&gt;+&lt;/code&gt; will be added. Cool!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Resources&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.obeythetestinggoat.com/"&gt;TDD in Python Book&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.lynda.com/Developer-Programming-Foundations-tutorials/Foundations-Programming-Test-Driven-Development/124398-2.html"&gt;Lynda.com course on TDD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.duolingo.com/"&gt;Duolingo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.python.org/dev/peps/pep-0008/"&gt;PEP8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/wistful/SublimeAutoPEP8"&gt;AutoPEP8 package for Sublime Text&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="human language"></category><category term="computer language"></category><category term="french"></category><category term="python"></category><category term="tdd"></category><category term="testing"></category></entry></feed>